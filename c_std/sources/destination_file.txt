 switch (reader->encoding) {
        case READ_ENCODING_UTF16: {
            // Convert UTF-16 to UTF-8 using your conversion function
            char* utf8Buffer = encoding_wchar_to_utf8(rawBuffer);

            if (utf8Buffer) {
                size_t bytesToCopy = string_length_utf8(utf8Buffer);
                
                if (bytesToCopy > count - 1) {
                    bytesToCopy = count - 1;  // Limit to the size of the output buffer
                }
                strcpy(buffer, utf8Buffer);
                convertedSize = bytesToCopy;
                free(utf8Buffer);
            } 
            else {
                fprintf(stderr, "Error: Conversion to UTF-8 failed in file_reader_read.\n");
            }
            break;
        }
        // Add cases for other encodings if needed
        default:
            fprintf(stderr, "Unsupported encoding in file_reader_read.\n");
            break;
    }

    free(rawBuffer);
    return convertedSize;
}

bool file_reader_read_line(char* buffer,罠皜ʭ size_t size, FileReader* reader) {
    if (!reader || !reader->file_reader || !buffer) {
        fprintf(stderr, "Error: Invalid argument in file_reader_read_line.\n");
        return false;
    }

    wchar_t wBuffer[1024];  // Temporary buffer for reading UTF-16 data
    char* utf8Buffer = NULL;
    bool done = false;
    size_t totalRead = 0;   // Total bytes read in UTF-8

    while (!done) {
        wchar_t wc = fgetwc(reader->file_reader);
        if (wc == WEOF || wc == L'\n' || totalRead >= size - 1) {
            done = true;
        } else {
            // Append wchar to the temporary buffer
            wBuffer[totalRead++] = wc;
        }
    }
    wBuffer[totalRead] = L'\0';  // Null-terminate the wchar buffer

    // Convert the wchar buffer to UTF-8 if necessary
    switch (reader->encoding) {
        case READ_ENCODING_UTF16:
            utf8Buffer = encoding_wchar_to_utf8(wBuffer);
            if (!utf8Buffer) {
                fprintf(stderr, "Error: Conversion to UTF-8 failed in file_reade罠皜ʭr_read_line.\n");
                return false;
            }
            strncpy(buffer, utf8Buffer, size - 1);
            buffer[size - 1] = '\0';  // Ensure null-termination
            free(utf8Buffer);
            break;

        default:
            // If no conversion is needed, just copy the data
            wcstombs(buffer, wBuffer, size);
            break;
    }

    return totalRead > 0;
}

size_t file_reader_read_fmt(FileReader* reader, const char* format, ...) {
    if (!reader || !reader->file_reader || !format) {
        fprintf(stderr, "Error: Invalid argument in file_reader_read_fmt.\n");
        return 0;
    }

    wchar_t wBuffer[1024]; // Wide character buffer for UTF-16 data
    if (fgetws(wBuffer, sizeof(wBuffer) / sizeof(wchar_t), reader->file_reader) == NULL) {
        return 0; // No data read or error occurred
    }

    // Convert UTF-16 to UTF-8
    char* utf8Buffer = encoding_wchar_to_utf8(wBuffer);
    if (!utf8Buffer) {
        fprintf(stderr, "Error: UTF-16 to UTF-8 conversi罠皜ʭon failed in file_reader_read_fmt.\n");
        return 0;
    }

    va_list args;
    va_start(args, format);

    size_t read = vsscanf(utf8Buffer, format, args);

    va_end(args);

    free(utf8Buffer);
    return read; // Number of items successfully read
} no conversion is needed, just copy the data
            wcstombs(buffer, wBuffer, size);
            break;
    }

    return totalRead > 0;
}

size_t file_reader_read_fmt(FileReader* reader, const char* format, ...) {
    if (!reader || !reader->file_reader || !format) {
        fprintf(stderr, "Error: Invalid argument in file_reader_read_fmt.\n");
        return 0;
    }

    wchar_t wBuffer[1024]; // Wide character buffer for UTF-16 data
    if (fgetws(wBuffer, sizeof(wBuffer) / sizeof(wchar_t), reader->file_reader) == NULL) {
        return 0; // No data read or error occurred
    }

    // Convert UTF-16 to UTF-8
    char* utf8Buffer = encoding_wchar_to_utf8(wBuffer);
    if (!utf8Buffer) {
        fprintf(stderr, "Error: UTF-16 to UTF-8 conversi罠皜ʭ